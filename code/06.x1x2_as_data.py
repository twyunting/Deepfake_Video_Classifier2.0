# -*- coding: utf-8 -*-
"""05.X1X2_as_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hOuk0DcQEFcuIT3GOgjscojFku6rey2j

# Observation 1 to 9720 please label `fake (0)`
# Observation 9721 to 19470 please label `real (1)`
"""

import numpy as np

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/American_University/2021_Fall/DATA-642-001_Advanced Machine Learning/data/data_ready/np_data
#!pwd

X1 = np.load("X1_images.npy", allow_pickle=True)
X2 = np.load("X2_texts.npy", allow_pickle=True)

print(X1.shape)
print(X2.shape)

print(X2[100].shape)
print(X2[1000].shape)
print(X2[5000].shape)
print(X2[1590].shape)

print(X2[1590])

"""# Fill 0 into each column to make sure the length of vectors are the same."""

def numpy_fillna(data):
    # Get lengths of each row of data
    lens = np.array([len(i) for i in data])

    # Mask of valid places in each row
    mask = np.arange(lens.max()) < lens[:,None]

    # Setup output array and put elements from data into masked positions
    out = np.zeros(mask.shape, dtype=data.dtype)
    out[mask] = np.concatenate(data)
    return out
X2 = numpy_fillna(X2)
print(X2.shape)

print(X2[2])
print(np.where(X2[2] == 0)[0])

print(len(X2[2]))
print(len(np.where(X2[2] == 0)[0]))

"""# Concatenate image arrays and text arrays
- Finally, there are 19470 observation and 20988 variables (features). 
"""

X_data = np.concatenate((X1, X2), axis = 1)
np.save("X_data.npy", X_data)
print("-----------data dimension---------------")
print(X_data.shape)

"""# Reference
- https://stackoverflow.com/questions/32037893/numpy-fix-array-with-rows-of-different-lengths-by-filling-the-empty-elements-wi/32043366
"""